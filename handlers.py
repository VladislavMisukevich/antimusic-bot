from telegram import Update
from telegram.ext import ContextTypes, CallbackContext, ConversationHandler
from database import Session, User, Lesson, Song, Assignment, CompletedLesson, CompletedSong
from keyboards import profile_keyboard, song_selection_keyboard, admin_review_keyboard
from config import Config
import random

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
SELECTING_SONG = 1


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    with Session() as session:
        db_user = session.query(User).filter_by(id=user.id).first()

        if not db_user:
            db_user = User(
                id=user.id,
                username=user.username,
                full_name=user.full_name
            )
            session.add(db_user)
            session.commit()

        await update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç, {user.full_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê–Ω—Ç–∏–º—É–∑—ã–∫–∞–ª–∫—É!",
            reply_markup=profile_keyboard(db_user)
        )

    return ConversationHandler.END


async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    with Session() as session:
        db_user = session.query(User).filter_by(id=user.id).first()

        if not db_user:
            await start(update, context)
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
        profile_text = (
            f"{db_user.full_name} | –ó–≤–∞–Ω–∏–µ: {db_user.rank} (‚ú®{db_user.reputation})\n"
            f"---\n"
            f"–ö—É—Ä—Å: {db_user.current_course} | –ü—Ä–æ–≥—Ä–µ—Å—Å: {db_user.progress:.1f}%\n"
        )

        if db_user.current_lesson_id:
            lesson = session.get(Lesson, db_user.current_lesson_id)
            profile_text += f"–¢–µ–∫—É—â–∏–π —É—Ä–æ–∫: {lesson.title}\n"

        if db_user.current_song_id:
            song = session.get(Song, db_user.current_song_id)
            profile_text += f"–¢–µ–∫—É—â–∏–π —Ä–∞–∑–±–æ—Ä: {song.title}\n"

        await update.message.reply_text(
            profile_text,
            reply_markup=profile_keyboard(db_user)
        )

    return ConversationHandler.END


async def start_lesson(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    query = update.callback_query
    await query.answer()

    with Session() as session:
        db_user = session.query(User).filter_by(id=user.id).first()

        if db_user.current_lesson_id or db_user.current_song_id:
            await query.edit_message_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ!")
            return

        # –õ–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–∫–∞
        next_lesson = session.query(Lesson).filter(
            Lesson.course == db_user.current_course,
            Lesson.id.not_in([cl.lesson_id for cl in db_user.completed_lessons])
        ).order_by(Lesson.order_index).first()

        if not next_lesson:
            await query.edit_message_text("üéâ –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å!")
            return

        db_user.current_lesson_id = next_lesson.id
        session.commit()

        await query.edit_message_text(
            f"‚úÖ –ù–∞—á–∞—Ç —É—Ä–æ–∫: {next_lesson.title}\n\n"
            "–ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ' –≤ –ø—Ä–æ—Ñ–∏–ª–µ.",
            reply_markup=profile_keyboard(db_user)
        )

    return ConversationHandler.END


async def start_song_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(
        "üé∏ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–∞–∑–±–æ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞:",
        reply_markup=song_selection_keyboard()
    )
    return SELECTING_SONG


async def select_song(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "cancel":
        await query.edit_message_text("–í—ã–±–æ—Ä —Ä–∞–∑–±–æ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω")
        return ConversationHandler.END

    song_id = int(query.data.split("_")[1])
    user = update.effective_user

    with Session() as session:
        db_user = session.query(User).filter_by(id=user.id).first()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏
        song = session.get(Song, song_id)
        if not song:
            await query.edit_message_text("‚ùå –¢–∞–∫–æ–≥–æ —Ä–∞–∑–±–æ—Ä–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            return SELECTING_SONG

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ
        if any(cs.song_id == song_id for cs in db_user.completed_songs):
            await query.edit_message_text("‚ö†Ô∏è –í—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ —ç—Ç–æ—Ç —Ä–∞–∑–±–æ—Ä!")
            return SELECTING_SONG

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
        if db_user.current_lesson_id or db_user.current_song_id:
            await query.edit_message_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ!")
            return SELECTING_SONG

        db_user.current_song_id = song_id
        session.commit()

        await query.edit_message_text(
            f"‚úÖ –ù–∞—á–∞—Ç —Ä–∞–∑–±–æ—Ä: {song.title}\n\n"
            "–ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ' –≤ –ø—Ä–æ—Ñ–∏–ª–µ.",
            reply_markup=profile_keyboard(db_user)
        )

    return ConversationHandler.END


async def submit_assignment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user = update.effective_user

    with Session() as session:
        db_user = session.query(User).filter_by(id=user.id).first()

        if not db_user.current_lesson_id and not db_user.current_song_id:
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π!")
            return

        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É
        assignment = Assignment(
            user_id=user.id,
            type="lesson" if db_user.current_lesson_id else "song",
            item_id=db_user.current_lesson_id or db_user.current_song_id
        )
        session.add(assignment)
        session.commit()

        # –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
        item_type = "—É—Ä–æ–∫" if assignment.type == "lesson" else "—Ä–∞–∑–±–æ—Ä"
        item_name = session.get(Lesson if assignment.type == "lesson" else Song, assignment.item_id).title

        await context.bot.send_message(
            chat_id=Config.ADMIN_ID,
            text=f"üì¨ –ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!\n"
                 f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{db_user.username}\n"
                 f"–¢–∏–ø: {item_type}\n"
                 f"–ó–∞–¥–∞–Ω–∏–µ: {item_name}\n"
                 f"ID –∑–∞–¥–∞–Ω–∏—è: {assignment.id}",
            reply_markup=admin_review_keyboard(assignment.id)
        )

        await query.edit_message_text(
            "‚úÖ –ó–∞–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!\n"
            "–ê–¥–º–∏–Ω –ø—Ä–æ–≤–µ—Ä–∏—Ç –µ–≥–æ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
        )

    return ConversationHandler.END


async def admin_approve(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    assignment_id = int(query.data.split("_")[1])
    reward = 0  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é

    with Session() as session:
        assignment = session.get(Assignment, assignment_id)
        if not assignment or assignment.status != "pending":
            await query.edit_message_text("‚ùå –ó–∞–¥–∞–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ!")
            return

        db_user = session.query(User).filter_by(id=assignment.user_id).first()
        config = Config()

        if assignment.type == "lesson":
            # –î–æ–±–∞–≤–ª—è–µ–º —É—Ä–æ–∫ –≤ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ
            session.add(CompletedLesson(
                user_id=db_user.id,
                lesson_id=assignment.item_id
            ))

            # –°–±—Ä–æ—Å —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–∫–∞
            db_user.current_lesson_id = None

            # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏
            lesson = session.get(Lesson, assignment.item_id)
            reward = config.FINAL_LESSON_REWARD if lesson and "–≤—ã–ø—É—Å–∫–Ω" in lesson.title.lower() else config.LESSON_REWARD
            db_user.reputation += reward

        else:  # type == "song"
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Å–Ω—é –≤ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ
            session.add(CompletedSong(
                user_id=db_user.id,
                song_id=assignment.item_id
            ))

            # –°–±—Ä–æ—Å —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞–∑–±–æ—Ä–∞
            db_user.current_song_id = None

            # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏
            reward = config.SONG_REWARD
            db_user.reputation += reward

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–≤–∞–Ω–∏—è
        db_user.update_rank(config)

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫—É—Ä—Å–∞
        total_lessons = session.query(Lesson).filter_by(course=db_user.current_course).count()
        completed_lessons = session.query(CompletedLesson).filter_by(user_id=db_user.id).count()
        db_user.progress = (completed_lessons / total_lessons) * 100 if total_lessons > 0 else 0

        assignment.status = "approved"
        session.commit()

        # –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await context.bot.send_message(
            chat_id=db_user.id,
            text=f"üéâ –í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ! +{reward} —Ä–µ–ø—É—Ç–∞—Ü–∏–∏\n"
                 f"–¢–µ–∫—É—â–∞—è —Ä–µ–ø—É—Ç–∞—Ü–∏—è: {db_user.reputation} ({db_user.rank})"
        )

        await query.edit_message_text(f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–æ! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª +{reward} —Ä–µ–ø—É—Ç–∞—Ü–∏–∏.")


async def admin_reject(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    assignment_id = int(query.data.split("_")[1])

    with Session() as session:
        assignment = session.get(Assignment, assignment_id)
        if not assignment or assignment.status != "pending":
            await query.edit_message_text("‚úîÔ∏è –ó–∞–¥–∞–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ!")
            return

        db_user = session.query(User).filter_by(id=assignment.user_id).first()

        assignment.status = "rejected"
        session.commit()

        # –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await context.bot.send_message(
            chat_id=db_user.id,
            text="üö´ –í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!"
        )

        await query.edit_message_text("‚ùå –ó–∞–¥–∞–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.")
